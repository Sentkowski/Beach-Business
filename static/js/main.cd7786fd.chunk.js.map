{"version":3,"sources":["shop-image-red.svg","shop-image-blue.svg","shop-image-white.svg","beach.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Belt","react_default","a","createElement","className","Ranking","props","key","ranking","name","isMe","money","TurnOverview","sequence","map","player","isMyName","placedShops","Fragment","src","isMyShop","shopImageBlue","shopImageRed","TurnButton","myShopPlaced","buttonBlocked","onClick","handleClick","disabled","Chart","Beach","counter","beachImage","sectors","customers","Sector","buttonDisabled","number","data-num","sector","isThereShop","owner","shopImagewWite","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentTurn","currentBeach","createBeachSectors","Mark","John","incomeHistory","nextTurn","bind","assertThisInitialized","assignPlayerShop","setState","continueTurn","shopsConfig","incomeList","i","length","distances","distanceToShop","Math","abs","push","closest","undefined","_arr","_i","distance","income","floor","_arr2","_i2","winner","e","target","dataset","num","placeShop","newState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","computerMakeTurn","err","return","bestSector","bestIncome","indexOf","beach","slice","shop","highestNumOfCustomers","max","apply","toConsumableArray","assign","currentIncomeList","countIncome","currentIncome","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","j","x","random","sectorsCount","sectorsArray","_this2","keys","newIncomeHistory","setTimeout","shuffle","players","_arr3","_i3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","turn","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","sort","b","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd7786fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shop-image-red.d764fd60.svg\";","module.exports = __webpack_public_path__ + \"static/media/shop-image-blue.4888b5c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/shop-image-white.e9e6089b.svg\";","module.exports = __webpack_public_path__ + \"static/media/beach.45e8695a.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport shopImageRed from './shop-image-red.svg';\nimport shopImageBlue from './shop-image-blue.svg';\nimport shopImagewWite from './shop-image-white.svg';\nimport beachImage from './beach.svg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTurn: ['John', 'Mark', 'You'],\n      currentBeach: this.createBeachSectors(),\n      placedShops: {Mark: 1, John: 2},\n      incomeHistory: [],\n      nextTurn: false,\n      buttonBlocked: false,\n    }\n    this.nextTurn = this.nextTurn.bind(this);\n    this.assignPlayerShop = this.assignPlayerShop.bind(this);\n  }\n\n  nextTurn() {\n    this.setState({nextTurn: true}, this.continueTurn)\n  }\n\n  countIncome(shopsConfig) {\n    let incomeList = [];\n    for (let i = 0; i < this.state.currentBeach.length; i++) {\n      let distances = [];\n      for (let player in shopsConfig) {\n        const distanceToShop = Math.abs((i + 1) - shopsConfig[player]);\n        distances.push({\n          player: player,\n          distanceToShop: distanceToShop\n        });\n      }\n      let closest = [{\n        distanceToShop: undefined,\n        player: undefined\n      }];\n      for (let distance of distances) {\n        if (distance.distanceToShop < closest[0].distanceToShop || closest[0].distanceToShop === undefined) {\n          closest = [distance];\n        } else if (distance.distanceToShop === closest[0].distanceToShop) {\n          closest.push(distance)\n        }\n      }\n      const income = Math.floor(this.state.currentBeach[i] / closest.length)\n      for (let winner of closest) {\n        incomeList.push({\n          player: winner.player,\n          income: income\n        })\n      }\n    }\n    return incomeList;\n  }\n\n  assignPlayerShop(e) {\n    const sector = e.target.dataset.num;\n    this.placeShop(sector, 'You');\n  }\n\n  placeShop(sector, player) {\n    let newState = this.state.placedShops;\n    newState[player] = sector;\n    this.setState({placedShops: newState});\n  }\n\n  continueTurn() {\n    for (let player of this.state.currentTurn) {\n      if (!(player in this.state.placedShops || player == 'You')) {\n        this.computerMakeTurn(player);\n      } else if (player == 'You' && !('You' in this.state.placedShops)) {\n        break;\n      }\n    }\n  }\n\n  computerMakeTurn(player) {\n    let bestIncome = 0;\n    let bestSector;\n    if (this.state.currentTurn.indexOf(player) != 2) {\n      let beach = this.state.currentBeach.slice(0)\n      for (let shop in this.state.placedShops) {\n        beach[this.state.placedShops[shop] - 1] = 0;\n      }\n      let highestNumOfCustomers = Math.max(...beach);\n      bestSector = this.state.currentBeach.indexOf(highestNumOfCustomers) + 1;\n    } else {\n      let shopsConfig = Object.assign({}, this.state.placedShops);\n      for (let i = 0; i < this.state.currentBeach.length; i++) {\n        shopsConfig[player] = i + 1;\n        let currentIncomeList = this.countIncome(shopsConfig);\n        let currentIncome = 0;\n        for (let sector of currentIncomeList) {\n          if (sector.player === player) {\n            currentIncome += sector.income;\n          }\n        }\n        if (currentIncome >= bestIncome) {\n          bestIncome = currentIncome;\n          bestSector = i + 1;\n        }\n      }\n    }\n    this.placeShop(bestSector, player)\n  }\n  \n  shuffle(a) {\n    let j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n  }\n\n  createBeachSectors() {\n    let sectorsCount = Math.floor(Math.random() * 4) + 4;\n    let sectorsArray = [];\n    for (let i = 0; i < sectorsCount; i++) {\n      sectorsArray.push(5 * Math.floor(Math.random() * 19));\n    }\n    return sectorsArray;\n  }\n\n  componentDidUpdate() {\n    if (this.state.nextTurn &&\n    Object.keys(this.state.placedShops).length === this.state.currentTurn.length) {\n      const income = this.countIncome(this.state.placedShops);\n      const newIncomeHistory = this.state.incomeHistory.slice(0, this.state.incomeHistory.length);\n      newIncomeHistory.push(income);\n      // setState -> setTimeout as callback -> setState -> setState as callback\n      // To give 500 ms before the next turn is started\n      this.setState({\n        nextTurn: false,\n        buttonBlocked: true\n      }, () => setTimeout(() => {\n        this.setState({\n          currentTurn: this.shuffle(['John', 'You', 'Mark']),\n          currentBeach: this.createBeachSectors(),\n          placedShops: {},\n          incomeHistory: newIncomeHistory,\n          buttonBlocked: false\n        }, this.continueTurn);\n      }, 750));\n    }\n  }\n\n  render() {\n    let players = [{name:'John', money: 0}, {name:'Mark', money: 0}, {name:'You', money: 0}];\n    for (let player of players) {\n      for (let turn of this.state.incomeHistory) {\n        for (let sector of turn) {\n          if (sector.player == player.name) {\n            player.money += sector.income;\n          }\n        }\n      }\n    }\n    players.sort((a, b) => b.money - a.money)\n\n    return (\n      <section className='App-grid'>\n        <Belt/>\n        <Ranking ranking={players}/>\n        <TurnOverview placedShops={this.state.placedShops} sequence={this.state.currentTurn}/>\n        <TurnButton buttonBlocked={this.state.buttonBlocked} handleClick={this.nextTurn} myShopPlaced={('You' in this.state.placedShops)}/>\n        <Chart/>\n        <Beach buttonDisabled={this.state.buttonBlocked} handleClick={this.assignPlayerShop} placedShops={this.state.placedShops} sectors={this.state.currentBeach}/>\n      </section>\n    );\n  }\n}\n\nfunction Belt() {\n  return (\n    <nav className='nav-belt'>\n      <div className='belt-red-circle'></div>\n      <div className='belt-white-circle'></div>\n    </nav>\n  )\n}\n\nfunction Ranking(props) {\n  return (\n    <ul className='ranking-container'>\n      <li key={props.ranking[0].name} className={isMe(props.ranking[0].name)}>\n        {props.ranking[0].name} – {props.ranking[0].money}$\n      </li>\n      <li key={props.ranking[1].name} className={isMe(props.ranking[1].name)}>\n        {props.ranking[1].name} – {props.ranking[1].money}$\n      </li>\n      <li key={props.ranking[2].name} className={isMe(props.ranking[2].name)}>\n        {props.ranking[2].name} – {props.ranking[2].money}$\n      </li>\n    </ul>\n  )\n\n  function isMe(name) {\n    if (name === 'You') {\n      return 'ranking-me'\n    } else {\n      return 'ranking-others'\n    }\n  }\n}\n\nfunction TurnOverview(props) {\n  return (\n    <ul className='turn-overview'>\n      {props.sequence.map((player) =>\n      <li key={player} className={'player-turn-container ' + isMyName(player)}>\n        <p>{player}</p>\n        {(player in props.placedShops) &&\n        <React.Fragment>\n          <p className='placed-shop-number'>{props.placedShops[player]}</p>\n          <img className='placed-shop-image' src={isMyShop(player)} />\n        </React.Fragment>\n        }\n        {!(player in props.placedShops) &&\n          <img src={isMyShop(player)} />\n        }\n      </li>\n      )}\n    </ul>\n  )\n\n  function isMyShop(name) {\n    if (name === 'You') {\n      return shopImageBlue;\n    } else {\n      return shopImageRed;\n    }\n  }\n  function isMyName(name) {\n    if (name === 'You') {\n      return 'shop-name-blue';\n    }\n  }\n}\n\nfunction TurnButton(props) {\n  if (props.myShopPlaced && !props.buttonBlocked) {\n    return (\n      <button onClick={props.handleClick} className='turn-button'>End turn</button>\n    )\n  } else {\n    return (\n      <button className='turn-button' disabled>Place your shop</button>\n    )\n  }\n}\n\nfunction Chart() {\n  return (\n    <div className='chart'/>\n  )\n}\n\nfunction Beach(props) {\n  let counter = 0;\n  return (\n    <div className='beach-container'>\n      <img className='beach-image' src={beachImage}/>\n      {props.sectors.map((customers) =>\n        <Sector buttonDisabled={props.buttonDisabled} placedShops={props.placedShops} handleClick={props.handleClick} customers={customers} number={counter += 1}/>\n      )}\n    </div>\n  )\n}\n\nfunction Sector(props) {\n  return (\n    <button data-num={props.number} disabled={props.buttonDisabled} className={isMyShop(props.number)} onClick={props.handleClick}>\n      <p>{props.number}</p>\n      {isThereShop(props.number)}\n      <p>{props.customers}</p>\n    </button>\n  )\n\n  function isThereShop(sector) {\n    let counter = 0;\n    for (let owner in props.placedShops) {\n      if (props.placedShops[owner] == sector) {\n        counter++;\n      }\n    }\n    if (counter === 1) {\n      return <img src={shopImagewWite} />\n    } else if (counter > 1) {\n      return <p>Contested</p>\n    }\n  }\n\n  function isMyShop(sector) {\n    if (isThereShop(sector)) {\n      for (let owner in props.placedShops) {\n        if (owner === 'You' && props.placedShops[owner] == sector) {\n          return 'players sector';\n        }\n      }\n      return 'computers sector';\n    }\n    return 'sector'\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}