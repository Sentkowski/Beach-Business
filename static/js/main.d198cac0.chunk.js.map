{"version":3,"sources":["shop-image-red.svg","shop-image-blue.svg","shop-image-white.svg","beach.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Belt","react_default","a","createElement","className","Ranking","props","key","ranking","name","isMe","money","TurnOverview","sequence","map","player","isMyName","placedShops","Fragment","src","isMyShop","shopImageBlue","shopImageRed","TurnButton","myShopPlaced","buttonBlocked","onClick","handleClick","disabled","Chart","height","width","document","querySelector","offsetHeight","offsetWidth","console","log","generatePointHistory","incomeHistory","es","margin","color","data","length","points","x","y","i","turnInc","sumIncome","sumSoFar","push","incomeList","income","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","undefined","_step5","_iterator5","Symbol","iterator","next","done","sector","value","err","return","Beach","counter","beachImage","sectors","customers","Sector","buttonDisabled","number","data-num","isThereShop","owner","shopImagewWite","Message","shopsConfig","beach","distances","distanceToShop","Math","abs","closest","_arr4","_i4","distance","floor","_arr5","_i5","winner","countIncome","players","sort","b","shoudlRender","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentTurn","currentBeach","createBeachSectors","Mark","John","nextTurn","bind","assertThisInitialized","assignPlayerShop","setState","continueTurn","_arr","_i","_arr2","_i2","e","target","dataset","num","placeShop","newState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","computerMakeTurn","bestSector","bestIncome","indexOf","slice","shop","highestNumOfCustomers","max","apply","toConsumableArray","assign","currentIncomeList","currentIncome","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","j","random","sectorsCount","sectorsArray","_this2","keys","newIncomeHistory","setTimeout","shuffle","_arr3","_i3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","turn","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d198cac0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shop-image-red.d764fd60.svg\";","module.exports = __webpack_public_path__ + \"static/media/shop-image-blue.4888b5c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/shop-image-white.e9e6089b.svg\";","module.exports = __webpack_public_path__ + \"static/media/beach.45e8695a.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineMarkSeries} from 'react-vis';\nimport shopImageRed from './shop-image-red.svg';\nimport shopImageBlue from './shop-image-blue.svg';\nimport shopImagewWite from './shop-image-white.svg';\nimport beachImage from './beach.svg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTurn: ['John', 'Mark', 'You'],\n      currentBeach: this.createBeachSectors(),\n      placedShops: {Mark: 1, John: 2},\n      incomeHistory: [],\n      nextTurn: false,\n      buttonBlocked: false,\n    }\n    this.nextTurn = this.nextTurn.bind(this);\n    this.assignPlayerShop = this.assignPlayerShop.bind(this);\n  }\n\n  nextTurn() {\n    this.setState({nextTurn: true}, this.continueTurn)\n  }\n\n  countIncome(shopsConfig) {\n    let incomeList = [];\n    for (let i = 0; i < this.state.currentBeach.length; i++) {\n      let distances = [];\n      for (let player in shopsConfig) {\n        const distanceToShop = Math.abs((i + 1) - shopsConfig[player]);\n        distances.push({\n          player: player,\n          distanceToShop: distanceToShop\n        });\n      }\n      let closest = [{\n        distanceToShop: undefined,\n        player: undefined\n      }];\n      for (let distance of distances) {\n        if (distance.distanceToShop < closest[0].distanceToShop || closest[0].distanceToShop === undefined) {\n          closest = [distance];\n        } else if (distance.distanceToShop === closest[0].distanceToShop) {\n          closest.push(distance)\n        }\n      }\n      const income = Math.floor(this.state.currentBeach[i] / closest.length)\n      for (let winner of closest) {\n        incomeList.push({\n          player: winner.player,\n          income: income\n        })\n      }\n    }\n    return incomeList;\n  }\n\n  assignPlayerShop(e) {\n    const sector = e.target.dataset.num;\n    this.placeShop(sector, 'You');\n  }\n\n  placeShop(sector, player) {\n    let newState = this.state.placedShops;\n    newState[player] = sector;\n    this.setState({placedShops: newState});\n  }\n\n  continueTurn() {\n    for (let player of this.state.currentTurn) {\n      if (!(player in this.state.placedShops || player == 'You')) {\n        this.computerMakeTurn(player);\n      } else if (player == 'You' && !('You' in this.state.placedShops)) {\n        break;\n      }\n    }\n  }\n\n  computerMakeTurn(player) {\n    let bestIncome = 0;\n    let bestSector;\n    if (this.state.currentTurn.indexOf(player) != 2) {\n      let beach = this.state.currentBeach.slice(0)\n      for (let shop in this.state.placedShops) {\n        beach[this.state.placedShops[shop] - 1] = 0;\n      }\n      let highestNumOfCustomers = Math.max(...beach);\n      bestSector = this.state.currentBeach.indexOf(highestNumOfCustomers) + 1;\n    } else {\n      let shopsConfig = Object.assign({}, this.state.placedShops);\n      for (let i = 0; i < this.state.currentBeach.length; i++) {\n        shopsConfig[player] = i + 1;\n        let currentIncomeList = this.countIncome(shopsConfig);\n        let currentIncome = 0;\n        for (let sector of currentIncomeList) {\n          if (sector.player === player) {\n            currentIncome += sector.income;\n          }\n        }\n        if (currentIncome >= bestIncome) {\n          bestIncome = currentIncome;\n          bestSector = i + 1;\n        }\n      }\n    }\n    this.placeShop(bestSector, player)\n  }\n  \n  shuffle(a) {\n    let j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n  }\n\n  createBeachSectors() {\n    let sectorsCount = Math.floor(Math.random() * 4) + 4;\n    let sectorsArray = [];\n    for (let i = 0; i < sectorsCount; i++) {\n      sectorsArray.push(5 * Math.floor(Math.random() * 19));\n    }\n    return sectorsArray;\n  }\n\n  componentDidUpdate() {\n    if (this.state.nextTurn &&\n    Object.keys(this.state.placedShops).length === this.state.currentTurn.length) {\n      const income = this.countIncome(this.state.placedShops);\n      const newIncomeHistory = this.state.incomeHistory.slice(0, this.state.incomeHistory.length);\n      newIncomeHistory.push(income);\n      // setState -> setTimeout as callback -> setState -> setState as callback\n      // To give a break before the next turn is started\n      this.setState({\n        nextTurn: false,\n        buttonBlocked: true\n      }, () => setTimeout(() => {\n        this.setState({\n          currentTurn: this.shuffle(['John', 'You', 'Mark']),\n          currentBeach: this.createBeachSectors(),\n          placedShops: {},\n          incomeHistory: newIncomeHistory,\n          buttonBlocked: false\n        }, this.continueTurn);\n      }, 2000));\n    }\n  }\n\n  render() {\n    let players = [{name:'John', money: 0}, {name:'Mark', money: 0}, {name:'You', money: 0}];\n    for (let player of players) {\n      for (let turn of this.state.incomeHistory) {\n        for (let sector of turn) {\n          if (sector.player == player.name) {\n            player.money += sector.income;\n          }\n        }\n      }\n    }\n    players.sort((a, b) => b.money - a.money);\n\n    return (\n      <React.Fragment>\n        <Message beach={this.state.currentBeach} placedShops={this.state.placedShops} shoudlRender={this.state.buttonBlocked} className='message-container'/>\n        <section className='App-grid'>\n          <Belt/>\n          <Ranking ranking={players}/>\n          <TurnOverview placedShops={this.state.placedShops} sequence={this.state.currentTurn}/>\n          <TurnButton buttonBlocked={this.state.buttonBlocked} handleClick={this.nextTurn} myShopPlaced={('You' in this.state.placedShops)}/>\n          <Chart incomeHistory={this.state.incomeHistory}/>\n          <Beach buttonDisabled={this.state.buttonBlocked} handleClick={this.assignPlayerShop} placedShops={this.state.placedShops} sectors={this.state.currentBeach}/>\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction Belt() {\n  return (\n    <nav className='nav-belt'>\n      <div className='belt-red-circle'></div>\n      <div className='belt-white-circle'></div>\n    </nav>\n  )\n}\n\nfunction Ranking(props) {\n  return (\n    <ul className='ranking-container'>\n      <li key={props.ranking[0].name} className={isMe(props.ranking[0].name)}>\n        {props.ranking[0].name} – {props.ranking[0].money}$\n      </li>\n      <li key={props.ranking[1].name} className={isMe(props.ranking[1].name)}>\n        {props.ranking[1].name} – {props.ranking[1].money}$\n      </li>\n      <li key={props.ranking[2].name} className={isMe(props.ranking[2].name)}>\n        {props.ranking[2].name} – {props.ranking[2].money}$\n      </li>\n    </ul>\n  )\n\n  function isMe(name) {\n    if (name === 'You') {\n      return 'ranking-me'\n    } else {\n      return 'ranking-others'\n    }\n  }\n}\n\nfunction TurnOverview(props) {\n  return (\n    <ul className='turn-overview'>\n      {props.sequence.map((player) =>\n      <li key={player} className={'player-turn-container ' + isMyName(player)}>\n        <p>{player}</p>\n        {(player in props.placedShops) &&\n        <React.Fragment>\n          <p className='placed-shop-number'>{props.placedShops[player]}</p>\n          <img className='placed-shop-image' src={isMyShop(player)} />\n        </React.Fragment>\n        }\n        {!(player in props.placedShops) &&\n          <img src={isMyShop(player)} />\n        }\n      </li>\n      )}\n    </ul>\n  )\n\n  function isMyShop(name) {\n    if (name === 'You') {\n      return shopImageBlue;\n    } else {\n      return shopImageRed;\n    }\n  }\n  function isMyName(name) {\n    if (name === 'You') {\n      return 'shop-name-blue';\n    }\n  }\n}\n\nfunction TurnButton(props) {\n  if (props.myShopPlaced && !props.buttonBlocked) {\n    return (\n      <button onClick={props.handleClick} className='turn-button'>End turn</button>\n    )\n  } else {\n    return (\n      <button className='turn-button' disabled>Place your shop</button>\n    )\n  }\n}\n\nfunction Chart(props) {\n  let height = 0;\n  let width = 0;\n  if (document.querySelector('.chart')) {\n    height = document.querySelector('.chart').offsetHeight - 15;\n    width = document.querySelector('.chart').offsetWidth - 15;\n  }\n  console.log(generatePointHistory(props.incomeHistory, 'You'))\n\n  return (\n    <div className='chart'>\n      <XYPlot margin={10} height={height} width={width}>\n        <LineMarkSeries color={'#FF6666'} data={generatePointHistory(props.incomeHistory, 'Mark')}/>\n        <LineMarkSeries color={'#FF6666'} data={generatePointHistory(props.incomeHistory, 'John')}/>\n        <LineMarkSeries color={'#2EC4B6'} data={generatePointHistory(props.incomeHistory, 'You')}/>\n      </XYPlot>\n    </div>\n  )\n\n  function generatePointHistory(incomeHistory, player) {\n    if (incomeHistory.length == 0) {\n      return;\n    }\n    let points = [{x: 0, y: 0}];\n    for (let i = 0; i < incomeHistory.length; i++) {\n      let turnInc = sumIncome(incomeHistory[i], player);\n      let sumSoFar = points[i].y + turnInc;\n      points.push({x: i + 1, y: sumSoFar})\n    }\n    return points;\n  }\n\n  function sumIncome(incomeList, player) {\n    let income = 0;\n    for (let sector of incomeList) {\n      if (sector.player === player) {\n        income += sector.income;\n      }\n    }\n    return income;\n  }\n}\n\nfunction Beach(props) {\n  let counter = 0;\n  return (\n    <div className='beach-container'>\n      <img className='beach-image' src={beachImage}/>\n      {props.sectors.map((customers) =>\n        <Sector buttonDisabled={props.buttonDisabled} placedShops={props.placedShops} handleClick={props.handleClick} customers={customers} number={counter += 1}/>\n      )}\n    </div>\n  )\n}\n\nfunction Sector(props) {\n  return (\n    <button data-num={props.number} disabled={props.buttonDisabled} className={isMyShop(props.number)} onClick={props.handleClick}>\n      <p>{props.number}</p>\n      {isThereShop(props.number)}\n      <p>{props.customers}</p>\n    </button>\n  )\n\n  function isThereShop(sector) {\n    let counter = 0;\n    for (let owner in props.placedShops) {\n      if (props.placedShops[owner] == sector) {\n        counter++;\n      }\n    }\n    if (counter === 1) {\n      return <img src={shopImagewWite} />\n    } else if (counter > 1) {\n      return <p>Contested</p>\n    }\n  }\n\n  function isMyShop(sector) {\n    if (isThereShop(sector)) {\n      for (let owner in props.placedShops) {\n        if (owner === 'You' && props.placedShops[owner] == sector) {\n          return 'players sector';\n        }\n      }\n      return 'computers sector';\n    }\n    return 'sector'\n  }\n}\n\nfunction Message(props) {\n  let incomeList = countIncome(props.placedShops, props.beach);\n  let players = [\n    {name:'John', money: sumIncome(incomeList, 'John')},\n    {name:'Mark', money: sumIncome(incomeList, 'Mark')},\n    {name:'You', money: sumIncome(incomeList, 'You')},\n  ];\n  players.sort((a, b) => b.money - a.money);\n  if (props.shoudlRender) {\n    return (\n      <ol className='income-message'>\n        <li className={isMyName(players[0].name)} key={players[0].name}>{players[0].name} +{players[0].money}$</li>\n        <li className={isMyName(players[1].name)} key={players[1].name}>{players[1].name} +{players[1].money}$</li>\n        <li className={isMyName(players[2].name)} key={players[2].name}>{players[2].name} +{players[2].money}$</li>\n      </ol>\n    )\n  } else {\n    return null;\n  }\n\n  function sumIncome(incomeList, player) {\n    let income = 0;\n    for (let sector of incomeList) {\n      if (sector.player === player) {\n        income += sector.income;\n      }\n    }\n    return income;\n  }\n\n  function isMyName(name) {\n    if (name === 'You') {\n      return 'my turn-result';\n    } else {\n      return 'others turn-result';\n    }\n  }\n\n  function countIncome(shopsConfig, beach) {\n    let incomeList = [];\n    for (let i = 0; i < beach.length; i++) {\n      let distances = [];\n      for (let player in shopsConfig) {\n        const distanceToShop = Math.abs((i + 1) - shopsConfig[player]);\n        distances.push({\n          player: player,\n          distanceToShop: distanceToShop\n        });\n      }\n      let closest = [{\n        distanceToShop: undefined,\n        player: undefined\n      }];\n      for (let distance of distances) {\n        if (distance.distanceToShop < closest[0].distanceToShop || closest[0].distanceToShop === undefined) {\n          closest = [distance];\n        } else if (distance.distanceToShop === closest[0].distanceToShop) {\n          closest.push(distance)\n        }\n      }\n      const income = Math.floor(beach[i] / closest.length)\n      for (let winner of closest) {\n        incomeList.push({\n          player: winner.player,\n          income: income\n        })\n      }\n    }\n    return incomeList;\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}