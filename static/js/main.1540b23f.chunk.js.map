{"version":3,"sources":["shop-image-red.svg","shop-image-blue.svg","shop-image-white.svg","beach.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Introduction","props","showIntroduction","react_default","a","createElement","className","onClick","handleClick","Belt","Ranking","key","ranking","name","isMe","money","TurnOverview","sequence","map","player","isMyName","placedShops","Fragment","alt","src","isMyShop","shopImageBlue","shopImageRed","TurnButton","myShopPlaced","buttonBlocked","disabled","Chart","height","width","document","querySelector","offsetHeight","offsetWidth","es","margin","color","data","generatePointHistory","incomeHistory","length","points","x","y","i","turnInc","sumIncome","sumSoFar","push","incomeList","income","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","undefined","_step5","_iterator5","Symbol","iterator","next","done","sector","value","err","return","Beach","counter","beachImage","sectors","customers","Sector","buttonDisabled","number","data-num","isThereShop","owner","shopImagewWite","Message","shopsConfig","beach","distances","distanceToShop","Math","abs","closest","_arr4","_i4","distance","floor","_arr5","_i5","winner","countIncome","players","sort","b","shoudlRender","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideIntroduction","setState","state","currentTurn","currentBeach","Mark","John","nextTurn","bind","assertThisInitialized","assignPlayerShop","continueTurn","_arr","_i","_arr2","_i2","e","target","dataset","num","placeShop","newState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","computerMakeTurn","bestSector","bestIncome","indexOf","slice","shop","max","apply","toConsumableArray","assign","currentIncomeList","currentIncome","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","j","random","sectorsCount","sectorsArray","_this2","keys","newIncomeHistory","setTimeout","shuffle","createBeachSectors","_arr3","_i3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","turn","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qVC6LxC,SAASC,EAAaC,GACpB,OAAIA,EAAMC,iBAENC,EAAAC,EAAAC,cAAA,WAASC,UAAU,wBACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,sHACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,mIACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAoBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAAlB,oHACjCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAoBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAAlB,0EACjCH,EAAAC,EAAAC,cAAA,UAAQE,QAASN,EAAMO,YAAaF,UAAU,6BAA9C,WAIG,KAIX,SAASG,IACP,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAKrB,SAASI,EAAQT,GACf,OACEE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,MAAIM,IAAKV,EAAMW,QAAQ,GAAGC,KAAMP,UAAWQ,EAAKb,EAAMW,QAAQ,GAAGC,OAC9DZ,EAAMW,QAAQ,GAAGC,KADpB,WAC6BZ,EAAMW,QAAQ,GAAGG,MAD9C,KAGAZ,EAAAC,EAAAC,cAAA,MAAIM,IAAKV,EAAMW,QAAQ,GAAGC,KAAMP,UAAWQ,EAAKb,EAAMW,QAAQ,GAAGC,OAC9DZ,EAAMW,QAAQ,GAAGC,KADpB,WAC6BZ,EAAMW,QAAQ,GAAGG,MAD9C,KAGAZ,EAAAC,EAAAC,cAAA,MAAIM,IAAKV,EAAMW,QAAQ,GAAGC,KAAMP,UAAWQ,EAAKb,EAAMW,QAAQ,GAAGC,OAC9DZ,EAAMW,QAAQ,GAAGC,KADpB,WAC6BZ,EAAMW,QAAQ,GAAGG,MAD9C,MAMJ,SAASD,EAAKD,GACZ,MAAa,QAATA,EACK,aAEA,kBAKb,SAASG,EAAaf,GACpB,OACEE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXL,EAAMgB,SAASC,IAAI,SAACC,GAAD,OACpBhB,EAAAC,EAAAC,cAAA,MAAIM,IAAKQ,EAAQb,UAAW,yBAA2Bc,EAASD,IAC9DhB,EAAAC,EAAAC,cAAA,SAAIc,GACFA,KAAUlB,EAAMoB,aAClBlB,EAAAC,EAAAC,cAACF,EAAAC,EAAMkB,SAAP,KACEnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAsBL,EAAMoB,YAAYF,IACrDhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBiB,IAAI,qBAAqBC,IAAKC,EAASN,QAGzEA,KAAUlB,EAAMoB,cACjBlB,EAAAC,EAAAC,cAAA,OAAKkB,IAAI,qBAAqBC,IAAKC,EAASN,SAOpD,SAASM,EAASZ,GAChB,MAAa,QAATA,EACKa,IAEAC,IAGX,SAASP,EAASP,GAChB,GAAa,QAATA,EACF,MAAO,kBAKb,SAASe,EAAW3B,GAClB,OAAIA,EAAM4B,eAAiB5B,EAAM6B,cAE7B3B,EAAAC,EAAAC,cAAA,UAAQE,QAASN,EAAMO,YAAaF,UAAU,eAA9C,YAIAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAcyB,UAAQ,GAAxC,mBAKN,SAASC,EAAM/B,GACb,IAAIgC,EAAS,EACTC,EAAQ,EAMZ,OALIC,SAASC,cAAc,YACzBH,EAASE,SAASC,cAAc,UAAUC,aAAe,GACzDH,EAAQC,SAASC,cAAc,UAAUE,YAAc,IAIvDnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAQC,OAAQ,GAAIP,OAAQA,EAAQC,MAAOA,GACzC/B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAgBE,MAAO,UAAWC,KAAMC,EAAqB1C,EAAM2C,cAAe,UAClFzC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAgBE,MAAO,UAAWC,KAAMC,EAAqB1C,EAAM2C,cAAe,UAClFzC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAgBE,MAAO,UAAWC,KAAMC,EAAqB1C,EAAM2C,cAAe,WAKxF,SAASD,EAAqBC,EAAezB,GAC3C,GAA4B,GAAxByB,EAAcC,OAAlB,CAIA,IADA,IAAIC,EAAS,CAAC,CAACC,EAAG,EAAGC,EAAG,IACfC,EAAI,EAAGA,EAAIL,EAAcC,OAAQI,IAAK,CAC7C,IAAIC,EAAUC,EAAUP,EAAcK,GAAI9B,GACtCiC,EAAWN,EAAOG,GAAGD,EAAIE,EAC7BJ,EAAOO,KAAK,CAACN,EAAGE,EAAI,EAAGD,EAAGI,IAE5B,OAAON,GAGT,SAASK,EAAUG,EAAYnC,GAC7B,IAAIoC,EAAS,EADwBC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAErC,QAAAC,EAAAC,EAAmBP,EAAnBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA+B,KAAtBU,EAAsBN,EAAAO,MACzBD,EAAO/C,SAAWA,IACpBoC,GAAUW,EAAOX,SAJgB,MAAAa,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAOrC,OAAOH,GAIX,SAASe,EAAMrE,GACb,IAAIsE,EAAU,EACd,OACEpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKkB,IAAI,gBAAgBjB,UAAU,cAAckB,IAAKgD,MACrDvE,EAAMwE,QAAQvD,IAAI,SAACwD,GAAD,OACjBvE,EAAAC,EAAAC,cAACsE,EAAD,CAAQC,eAAgB3E,EAAM2E,eAAgBvD,YAAapB,EAAMoB,YAAab,YAAaP,EAAMO,YAAakE,UAAWA,EAAWG,OAAQN,GAAW,OAM/J,SAASI,EAAO1E,GACd,OACEE,EAAAC,EAAAC,cAAA,UAAQyE,WAAU7E,EAAM4E,OAAQ9C,SAAU9B,EAAM2E,eAAgBtE,UAqBlE,SAAkB4D,GAChB,GAAIa,EAAYb,GAAS,CACvB,IAAK,IAAIc,KAAS/E,EAAMoB,YACtB,GAAc,QAAV2D,GAAmB/E,EAAMoB,YAAY2D,IAAUd,EACjD,MAAO,iBAGX,MAAO,mBAET,MAAO,SA9BoEzC,CAASxB,EAAM4E,QAAStE,QAASN,EAAMO,aAChHL,EAAAC,EAAAC,cAAA,SAAIJ,EAAM4E,QACTE,EAAY9E,EAAM4E,QACnB1E,EAAAC,EAAAC,cAAA,SAAIJ,EAAMyE,YAId,SAASK,EAAYb,GACnB,IAAIK,EAAU,EACd,IAAK,IAAIS,KAAS/E,EAAMoB,YAClBpB,EAAMoB,YAAY2D,IAAUd,GAC9BK,IAGJ,OAAgB,IAAZA,EACKpE,EAAAC,EAAAC,cAAA,OAAKkB,IAAI,qBAAqBC,IAAKyD,MACjCV,EAAU,EACZpE,EAAAC,EAAAC,cAAA,2BADF,GAkBX,SAAS6E,EAAQjF,GACf,IAAIqD,EAqCJ,SAAqB6B,EAAaC,GAEhC,IADA,IAAI9B,EAAa,GACRL,EAAI,EAAGA,EAAImC,EAAMvC,OAAQI,IAAK,CACrC,IAAIoC,EAAY,GAChB,IAAK,IAAIlE,KAAUgE,EAAa,CAC9B,IAAMG,EAAiBC,KAAKC,IAAKvC,EAAI,EAAKkC,EAAYhE,IACtDkE,EAAUhC,KAAK,CACblC,OAAQA,EACRmE,eAAgBA,IAOpB,IAJA,IAAIG,EAAU,CAAC,CACbH,oBAAgB3B,EAChBxC,YAAQwC,IAX2B+B,EAahBL,EAArBM,EAAA,EAAAA,EAAAD,EAAA7C,OAAA8C,IAAgC,CAA3B,IAAIC,EAAQF,EAAAC,GACXC,EAASN,eAAiBG,EAAQ,GAAGH,qBAAgD3B,IAA9B8B,EAAQ,GAAGH,eACpEG,EAAU,CAACG,GACFA,EAASN,iBAAmBG,EAAQ,GAAGH,gBAChDG,EAAQpC,KAAKuC,GAIjB,IADA,IAAMrC,EAASgC,KAAKM,MAAMT,EAAMnC,GAAKwC,EAAQ5C,QApBRiD,EAqBlBL,EAAnBM,EAAA,EAAAA,EAAAD,EAAAjD,OAAAkD,IAA4B,CAAvB,IAAIC,EAAMF,EAAAC,GACbzC,EAAWD,KAAK,CACdlC,OAAQ6E,EAAO7E,OACfoC,OAAQA,KAId,OAAOD,EAnEQ2C,CAAYhG,EAAMoB,YAAapB,EAAMmF,OAClDc,EAAU,CACZ,CAACrF,KAAK,OAAQE,MAAOoC,EAAUG,EAAY,SAC3C,CAACzC,KAAK,OAAQE,MAAOoC,EAAUG,EAAY,SAC3C,CAACzC,KAAK,MAAOE,MAAOoC,EAAUG,EAAY,SAG5C,OADA4C,EAAQC,KAAK,SAAC/F,EAAGgG,GAAJ,OAAUA,EAAErF,MAAQX,EAAEW,QAC/Bd,EAAMoG,aAENlG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAWc,EAAS8E,EAAQ,GAAGrF,MAAOF,IAAKuF,EAAQ,GAAGrF,MAAOqF,EAAQ,GAAGrF,KAA5E,KAAoFqF,EAAQ,GAAGnF,MAA/F,KACAZ,EAAAC,EAAAC,cAAA,MAAIC,UAAWc,EAAS8E,EAAQ,GAAGrF,MAAOF,IAAKuF,EAAQ,GAAGrF,MAAOqF,EAAQ,GAAGrF,KAA5E,KAAoFqF,EAAQ,GAAGnF,MAA/F,KACAZ,EAAAC,EAAAC,cAAA,MAAIC,UAAWc,EAAS8E,EAAQ,GAAGrF,MAAOF,IAAKuF,EAAQ,GAAGrF,MAAOqF,EAAQ,GAAGrF,KAA5E,KAAoFqF,EAAQ,GAAGnF,MAA/F,MAIG,KAGT,SAASoC,EAAUG,EAAYnC,GAC7B,IAAIoC,EAAS,EADwB+C,GAAA,EAAAC,GAAA,EAAAC,OAAA7C,EAAA,IAErC,QAAA8C,EAAAC,EAAmBpD,EAAnBQ,OAAAC,cAAAuC,GAAAG,EAAAC,EAAA1C,QAAAC,MAAAqC,GAAA,EAA+B,KAAtBpC,EAAsBuC,EAAAtC,MACzBD,EAAO/C,SAAWA,IACpBoC,GAAUW,EAAOX,SAJgB,MAAAa,GAAAmC,GAAA,EAAAC,EAAApC,EAAA,YAAAkC,GAAA,MAAAI,EAAArC,QAAAqC,EAAArC,SAAA,WAAAkC,EAAA,MAAAC,GAOrC,OAAOjD,EAGT,SAASnC,EAASP,GAChB,MAAa,QAATA,EACK,iBAEA,sBAsCE8F,kBApbb,SAAAA,EAAY1G,GAAO,IAAA2G,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM9G,KAyHRkH,iBAAmB,WACjBP,EAAKQ,SAAS,CAAClH,kBAAkB,KAzHjC0G,EAAKS,MAAQ,CACXC,YAAa,CAAC,OAAQ,OAAQ,OAC9BC,aAAc,CAAC,GAAI,GAAI,GAAI,IAC3BlG,YAAa,CAACmG,KAAM,EAAGC,KAAM,GAC7B7E,cAAe,GACf8E,UAAU,EACV5F,eAAe,EACf5B,kBAAkB,GAEpB0G,EAAKc,SAAWd,EAAKc,SAASC,KAAdd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAChBA,EAAKiB,iBAAmBjB,EAAKiB,iBAAiBF,KAAtBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAZPA,0EAgBjBG,KAAKK,SAAS,CAACM,UAAU,GAAOX,KAAKe,kDAG3B3C,GAEV,IADA,IAAI7B,EAAa,GACRL,EAAI,EAAGA,EAAI8D,KAAKM,MAAME,aAAa1E,OAAQI,IAAK,CACvD,IAAIoC,EAAY,GAChB,IAAK,IAAIlE,KAAUgE,EAAa,CAC9B,IAAMG,EAAiBC,KAAKC,IAAKvC,EAAI,EAAKkC,EAAYhE,IACtDkE,EAAUhC,KAAK,CACblC,OAAQA,EACRmE,eAAgBA,IAOpB,IAJA,IAAIG,EAAU,CAAC,CACbH,oBAAgB3B,EAChBxC,YAAQwC,IAX6CoE,EAalC1C,EAArB2C,EAAA,EAAAA,EAAAD,EAAAlF,OAAAmF,IAAgC,CAA3B,IAAIpC,EAAQmC,EAAAC,GACXpC,EAASN,eAAiBG,EAAQ,GAAGH,qBAAgD3B,IAA9B8B,EAAQ,GAAGH,eACpEG,EAAU,CAACG,GACFA,EAASN,iBAAmBG,EAAQ,GAAGH,gBAChDG,EAAQpC,KAAKuC,GAIjB,IADA,IAAMrC,EAASgC,KAAKM,MAAMkB,KAAKM,MAAME,aAAatE,GAAKwC,EAAQ5C,QApBRoF,EAqBpCxC,EAAnByC,EAAA,EAAAA,EAAAD,EAAApF,OAAAqF,IAA4B,CAAvB,IAAIlC,EAAMiC,EAAAC,GACb5E,EAAWD,KAAK,CACdlC,OAAQ6E,EAAO7E,OACfoC,OAAQA,KAId,OAAOD,2CAGQ6E,GACf,IAAMjE,EAASiE,EAAEC,OAAOC,QAAQC,IAChCvB,KAAKwB,UAAUrE,EAAQ,yCAGfA,EAAQ/C,GAChB,IAAIqH,EAAWzB,KAAKM,MAAMhG,YAC1BmH,EAASrH,GAAU+C,EACnB6C,KAAKK,SAAS,CAAC/F,YAAamH,2CAGf,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAhF,EAAA,IACb,QAAAiF,EAAAC,EAAmB9B,KAAKM,MAAMC,YAA9BxD,OAAAC,cAAA0E,GAAAG,EAAAC,EAAA7E,QAAAC,MAAAwE,GAAA,EAA2C,KAAlCtH,EAAkCyH,EAAAzE,MACzC,GAAMhD,KAAU4F,KAAKM,MAAMhG,aAAyB,OAAVF,GAEnC,GAAc,OAAVA,KAAqB,QAAS4F,KAAKM,MAAMhG,aAClD,WAFA0F,KAAK+B,iBAAiB3H,IAHb,MAAAiD,GAAAsE,GAAA,EAAAC,EAAAvE,EAAA,YAAAqE,GAAA,MAAAI,EAAAxE,QAAAwE,EAAAxE,SAAA,WAAAqE,EAAA,MAAAC,6CAUExH,GACf,IACI4H,EADAC,EAAa,EAEjB,GAA8C,GAA1CjC,KAAKM,MAAMC,YAAY2B,QAAQ9H,GAAc,CAC/C,IAAIiE,EAAQ2B,KAAKM,MAAME,aAAa2B,MAAM,GAC1C,IAAK,IAAIC,KAAQpC,KAAKM,MAAMhG,YAC1B+D,EAAM2B,KAAKM,MAAMhG,YAAY8H,GAAQ,GAAK,EAE5CJ,EAAa3D,EAAM6D,QAAQ1D,KAAK6D,IAALC,MAAA9D,KAAIsB,OAAAyC,EAAA,EAAAzC,CAAQzB,KAAU,OAGjD,IADA,IAAID,EAAc0B,OAAO0C,OAAO,GAAIxC,KAAKM,MAAMhG,aACtC4B,EAAI,EAAGA,EAAI8D,KAAKM,MAAME,aAAa1E,OAAQI,IAAK,CACvDkC,EAAYhE,GAAU8B,EAAI,EAC1B,IAAIuG,EAAoBzC,KAAKd,YAAYd,GACrCsE,EAAgB,EAHmCC,GAAA,EAAAC,GAAA,EAAAC,OAAAjG,EAAA,IAIvD,QAAAkG,EAAAC,EAAmBN,EAAnB1F,OAAAC,cAAA2F,GAAAG,EAAAC,EAAA9F,QAAAC,MAAAyF,GAAA,EAAsC,KAA7BxF,EAA6B2F,EAAA1F,MAChCD,EAAO/C,SAAWA,IACpBsI,GAAiBvF,EAAOX,SAN2B,MAAAa,GAAAuF,GAAA,EAAAC,EAAAxF,EAAA,YAAAsF,GAAA,MAAAI,EAAAzF,QAAAyF,EAAAzF,SAAA,WAAAsF,EAAA,MAAAC,GASnDH,GAAiBT,IACnBA,EAAaS,EACbV,EAAa9F,EAAI,GAIvB8D,KAAKwB,UAAUQ,EAAY5H,mCAGrBf,GACN,IAAI2J,EAAGhH,EAAGE,EACV,IAAKA,EAAI7C,EAAEyC,OAAS,EAAGI,EAAI,EAAGA,IAC1B8G,EAAIxE,KAAKM,MAAMN,KAAKyE,UAAY/G,EAAI,IACpCF,EAAI3C,EAAE6C,GACN7C,EAAE6C,GAAK7C,EAAE2J,GACT3J,EAAE2J,GAAKhH,EAEX,OAAO3C,+CAMP,IAFA,IAAI6J,EAAe1E,KAAKM,MAAsB,EAAhBN,KAAKyE,UAAgB,EAC/CE,EAAe,GACVjH,EAAI,EAAGA,EAAIgH,EAAchH,IAChCiH,EAAa7G,KAAK,EAAIkC,KAAKM,MAAsB,GAAhBN,KAAKyE,WAExC,OAAOE,+CAOY,IAAAC,EAAApD,KACnB,GAAIA,KAAKM,MAAMK,UACfb,OAAOuD,KAAKrD,KAAKM,MAAMhG,aAAawB,SAAWkE,KAAKM,MAAMC,YAAYzE,OAAQ,CAC5E,IAAMU,EAASwD,KAAKd,YAAYc,KAAKM,MAAMhG,aACrCgJ,EAAmBtD,KAAKM,MAAMzE,cAAcsG,MAAM,EAAGnC,KAAKM,MAAMzE,cAAcC,QACpFwH,EAAiBhH,KAAKE,GAGtBwD,KAAKK,SAAS,CACZM,UAAU,EACV5F,eAAe,GACd,kBAAMwI,WAAW,WAClBH,EAAK/C,SAAS,CACZE,YAAa6C,EAAKI,QAAQ,CAAC,OAAQ,MAAO,SAC1ChD,aAAc4C,EAAKK,qBACnBnJ,YAAa,GACbuB,cAAeyH,EACfvI,eAAe,GACdqI,EAAKrC,eACP,yCAML,IADA,IAAI5B,EAAU,CAAC,CAACrF,KAAK,OAAQE,MAAO,GAAI,CAACF,KAAK,OAAQE,MAAO,GAAI,CAACF,KAAK,MAAOE,MAAO,IAD9E0J,EAEYvE,EAAnBwE,EAAA,EAAAA,EAAAD,EAAA5H,OAAA6H,IAA4B,CAAvB,IAAIvJ,EAAMsJ,EAAAC,GAAaC,GAAA,EAAAC,GAAA,EAAAC,OAAAlH,EAAA,IAC1B,QAAAmH,EAAAC,EAAiBhE,KAAKM,MAAMzE,cAA5BkB,OAAAC,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAA2C,KAAlCK,EAAkCF,EAAA3G,MAAA8G,GAAA,EAAAC,GAAA,EAAAC,OAAAxH,EAAA,IACzC,QAAAyH,EAAAC,EAAmBL,EAAnBlH,OAAAC,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,EAAyB,KAAhB/G,EAAgBkH,EAAAjH,MACnBD,EAAO/C,QAAUA,EAAON,OAC1BM,EAAOJ,OAASmD,EAAOX,SAHc,MAAAa,GAAA8G,GAAA,EAAAC,EAAA/G,EAAA,YAAA6G,GAAA,MAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,KADjB,MAAA/G,GAAAwG,GAAA,EAAAC,EAAAzG,EAAA,YAAAuG,GAAA,MAAAI,EAAA1G,QAAA0G,EAAA1G,SAAA,WAAAuG,EAAA,MAAAC,IAW5B,OAFA3E,EAAQC,KAAK,SAAC/F,EAAGgG,GAAJ,OAAUA,EAAErF,MAAQX,EAAEW,QAGjCZ,EAAAC,EAAAC,cAACF,EAAAC,EAAMkB,SAAP,KACEnB,EAAAC,EAAAC,cAACL,EAAD,CAAcQ,YAAauG,KAAKI,iBAAkBjH,iBAAkB6G,KAAKM,MAAMnH,mBAC/EC,EAAAC,EAAAC,cAAC6E,EAAD,CAASE,MAAO2B,KAAKM,MAAME,aAAclG,YAAa0F,KAAKM,MAAMhG,YAAagF,aAAcU,KAAKM,MAAMvF,cAAexB,UAAU,sBAChIH,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAACI,EAAD,MACAN,EAAAC,EAAAC,cAACK,EAAD,CAASE,QAASsF,IAClB/F,EAAAC,EAAAC,cAACW,EAAD,CAAcK,YAAa0F,KAAKM,MAAMhG,YAAaJ,SAAU8F,KAAKM,MAAMC,cACxEnH,EAAAC,EAAAC,cAACuB,EAAD,CAAYE,cAAeiF,KAAKM,MAAMvF,cAAetB,YAAauG,KAAKW,SAAU7F,aAAe,QAASkF,KAAKM,MAAMhG,cACpHlB,EAAAC,EAAAC,cAAC2B,EAAD,CAAOY,cAAemE,KAAKM,MAAMzE,gBACjCzC,EAAAC,EAAAC,cAACiE,EAAD,CAAOM,eAAgBmC,KAAKM,MAAMvF,cAAetB,YAAauG,KAAKc,iBAAkBxG,YAAa0F,KAAKM,MAAMhG,YAAaoD,QAASsC,KAAKM,MAAME,wBA7KtI+D,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1L,EAAAC,EAAAC,cAACyL,EAAD,MAAS3J,SAAS4J,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1540b23f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shop-image-red.d764fd60.svg\";","module.exports = __webpack_public_path__ + \"static/media/shop-image-blue.4888b5c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/shop-image-white.e9e6089b.svg\";","module.exports = __webpack_public_path__ + \"static/media/beach.45e8695a.svg\";","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {XYPlot, LineMarkSeries} from 'react-vis';\r\nimport shopImageRed from './shop-image-red.svg';\r\nimport shopImageBlue from './shop-image-blue.svg';\r\nimport shopImagewWite from './shop-image-white.svg';\r\nimport beachImage from './beach.svg';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentTurn: ['John', 'Mark', 'You'],\r\n      currentBeach: [50, 50, 50, 50],\r\n      placedShops: {Mark: 1, John: 2},\r\n      incomeHistory: [],\r\n      nextTurn: false,\r\n      buttonBlocked: false,\r\n      showIntroduction: true\r\n    }\r\n    this.nextTurn = this.nextTurn.bind(this);\r\n    this.assignPlayerShop = this.assignPlayerShop.bind(this);\r\n  }\r\n\r\n  nextTurn() {\r\n    this.setState({nextTurn: true}, this.continueTurn)\r\n  }\r\n\r\n  countIncome(shopsConfig) {\r\n    let incomeList = [];\r\n    for (let i = 0; i < this.state.currentBeach.length; i++) {\r\n      let distances = [];\r\n      for (let player in shopsConfig) {\r\n        const distanceToShop = Math.abs((i + 1) - shopsConfig[player]);\r\n        distances.push({\r\n          player: player,\r\n          distanceToShop: distanceToShop\r\n        });\r\n      }\r\n      let closest = [{\r\n        distanceToShop: undefined,\r\n        player: undefined\r\n      }];\r\n      for (let distance of distances) {\r\n        if (distance.distanceToShop < closest[0].distanceToShop || closest[0].distanceToShop === undefined) {\r\n          closest = [distance];\r\n        } else if (distance.distanceToShop === closest[0].distanceToShop) {\r\n          closest.push(distance)\r\n        }\r\n      }\r\n      const income = Math.floor(this.state.currentBeach[i] / closest.length)\r\n      for (let winner of closest) {\r\n        incomeList.push({\r\n          player: winner.player,\r\n          income: income\r\n        })\r\n      }\r\n    }\r\n    return incomeList;\r\n  }\r\n\r\n  assignPlayerShop(e) {\r\n    const sector = e.target.dataset.num;\r\n    this.placeShop(sector, 'You');\r\n  }\r\n\r\n  placeShop(sector, player) {\r\n    let newState = this.state.placedShops;\r\n    newState[player] = sector;\r\n    this.setState({placedShops: newState});\r\n  }\r\n\r\n  continueTurn() {\r\n    for (let player of this.state.currentTurn) {\r\n      if (!(player in this.state.placedShops || player == 'You')) {\r\n        this.computerMakeTurn(player);\r\n      } else if (player == 'You' && !('You' in this.state.placedShops)) {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  computerMakeTurn(player) {\r\n    let bestIncome = 0;\r\n    let bestSector;\r\n    if (this.state.currentTurn.indexOf(player) != 2) {\r\n      let beach = this.state.currentBeach.slice(0)\r\n      for (let shop in this.state.placedShops) {\r\n        beach[this.state.placedShops[shop] - 1] = 0;\r\n      }\r\n      bestSector = beach.indexOf(Math.max(...beach)) + 1;\r\n    } else {\r\n      let shopsConfig = Object.assign({}, this.state.placedShops);\r\n      for (let i = 0; i < this.state.currentBeach.length; i++) {\r\n        shopsConfig[player] = i + 1;\r\n        let currentIncomeList = this.countIncome(shopsConfig);\r\n        let currentIncome = 0;\r\n        for (let sector of currentIncomeList) {\r\n          if (sector.player === player) {\r\n            currentIncome += sector.income;\r\n          }\r\n        }\r\n        if (currentIncome >= bestIncome) {\r\n          bestIncome = currentIncome;\r\n          bestSector = i + 1;\r\n        }\r\n      }\r\n    }\r\n    this.placeShop(bestSector, player)\r\n  }\r\n  \r\n  shuffle(a) {\r\n    let j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  createBeachSectors() {\r\n    let sectorsCount = Math.floor(Math.random() * 4) + 4;\r\n    let sectorsArray = [];\r\n    for (let i = 0; i < sectorsCount; i++) {\r\n      sectorsArray.push(5 * Math.floor(Math.random() * 19));\r\n    }\r\n    return sectorsArray;\r\n  }\r\n\r\n  hideIntroduction = () => {\r\n    this.setState({showIntroduction: false});\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.nextTurn &&\r\n    Object.keys(this.state.placedShops).length === this.state.currentTurn.length) {\r\n      const income = this.countIncome(this.state.placedShops);\r\n      const newIncomeHistory = this.state.incomeHistory.slice(0, this.state.incomeHistory.length);\r\n      newIncomeHistory.push(income);\r\n      // setState -> setTimeout as callback -> setState -> setState as callback\r\n      // To give a break before the next turn is started\r\n      this.setState({\r\n        nextTurn: false,\r\n        buttonBlocked: true\r\n      }, () => setTimeout(() => {\r\n        this.setState({\r\n          currentTurn: this.shuffle(['John', 'You', 'Mark']),\r\n          currentBeach: this.createBeachSectors(),\r\n          placedShops: {},\r\n          incomeHistory: newIncomeHistory,\r\n          buttonBlocked: false\r\n        }, this.continueTurn);\r\n      }, 2000));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let players = [{name:'John', money: 0}, {name:'Mark', money: 0}, {name:'You', money: 0}];\r\n    for (let player of players) {\r\n      for (let turn of this.state.incomeHistory) {\r\n        for (let sector of turn) {\r\n          if (sector.player == player.name) {\r\n            player.money += sector.income;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    players.sort((a, b) => b.money - a.money);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Introduction handleClick={this.hideIntroduction} showIntroduction={this.state.showIntroduction} />\r\n        <Message beach={this.state.currentBeach} placedShops={this.state.placedShops} shoudlRender={this.state.buttonBlocked} className='message-container'/>\r\n        <section className='App-grid'>\r\n          <Belt/>\r\n          <Ranking ranking={players}/>\r\n          <TurnOverview placedShops={this.state.placedShops} sequence={this.state.currentTurn}/>\r\n          <TurnButton buttonBlocked={this.state.buttonBlocked} handleClick={this.nextTurn} myShopPlaced={('You' in this.state.placedShops)}/>\r\n          <Chart incomeHistory={this.state.incomeHistory}/>\r\n          <Beach buttonDisabled={this.state.buttonBlocked} handleClick={this.assignPlayerShop} placedShops={this.state.placedShops} sectors={this.state.currentBeach}/>\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Introduction(props) {\r\n  if (props.showIntroduction) {\r\n    return (\r\n      <section className=\"introduction-section\">\r\n        <p className='introduction-text'>You travel the world selling snacks on every possible beach. The problem is that John and Mark are doing the same!</p>\r\n        <p className='introduction-text'>Sometimes you are the first on the spot, sometimes it is Mark or John. Place your shop to attract as many customers as you can.</p>\r\n        <p className='introduction-text'><strong className=\"introduction-important\">Customers are lazy and visit the closest store. If there are a few shops equally near – profit is divided.</strong></p>\r\n        <p className='introduction-text'><strong className=\"introduction-important\">NOTE: The number of customers is at the bottom of every beach sector.</strong></p>\r\n        <button onClick={props.handleClick} className='introduction-close-button'>Got it</button>\r\n      </section>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction Belt() {\r\n  return (\r\n    <nav className='nav-belt'>\r\n      <div className='belt-red-circle'></div>\r\n      <div className='belt-white-circle'></div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nfunction Ranking(props) {\r\n  return (\r\n    <ul className='ranking-container'>\r\n      <li key={props.ranking[0].name} className={isMe(props.ranking[0].name)}>\r\n        {props.ranking[0].name} – {props.ranking[0].money}$\r\n      </li>\r\n      <li key={props.ranking[1].name} className={isMe(props.ranking[1].name)}>\r\n        {props.ranking[1].name} – {props.ranking[1].money}$\r\n      </li>\r\n      <li key={props.ranking[2].name} className={isMe(props.ranking[2].name)}>\r\n        {props.ranking[2].name} – {props.ranking[2].money}$\r\n      </li>\r\n    </ul>\r\n  )\r\n\r\n  function isMe(name) {\r\n    if (name === 'You') {\r\n      return 'ranking-me'\r\n    } else {\r\n      return 'ranking-others'\r\n    }\r\n  }\r\n}\r\n\r\nfunction TurnOverview(props) {\r\n  return (\r\n    <ul className='turn-overview'>\r\n      {props.sequence.map((player) =>\r\n      <li key={player} className={'player-turn-container ' + isMyName(player)}>\r\n        <p>{player}</p>\r\n        {(player in props.placedShops) &&\r\n        <React.Fragment>\r\n          <p className='placed-shop-number'>{props.placedShops[player]}</p>\r\n          <img className='placed-shop-image' alt=\"An icon of a shop.\" src={isMyShop(player)} />\r\n        </React.Fragment>\r\n        }\r\n        {!(player in props.placedShops) &&\r\n          <img alt=\"An icon of a shop.\" src={isMyShop(player)} />\r\n        }\r\n      </li>\r\n      )}\r\n    </ul>\r\n  )\r\n\r\n  function isMyShop(name) {\r\n    if (name === 'You') {\r\n      return shopImageBlue;\r\n    } else {\r\n      return shopImageRed;\r\n    }\r\n  }\r\n  function isMyName(name) {\r\n    if (name === 'You') {\r\n      return 'shop-name-blue';\r\n    }\r\n  }\r\n}\r\n\r\nfunction TurnButton(props) {\r\n  if (props.myShopPlaced && !props.buttonBlocked) {\r\n    return (\r\n      <button onClick={props.handleClick} className='turn-button'>End turn</button>\r\n    )\r\n  } else {\r\n    return (\r\n      <button className='turn-button' disabled>Place your shop</button>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Chart(props) {\r\n  let height = 0;\r\n  let width = 0;\r\n  if (document.querySelector('.chart')) {\r\n    height = document.querySelector('.chart').offsetHeight - 15;\r\n    width = document.querySelector('.chart').offsetWidth - 15;\r\n  }\r\n\r\n  return (\r\n    <div className='chart'>\r\n      <XYPlot margin={10} height={height} width={width}>\r\n        <LineMarkSeries color={'#FF6666'} data={generatePointHistory(props.incomeHistory, 'Mark')}/>\r\n        <LineMarkSeries color={'#FF6666'} data={generatePointHistory(props.incomeHistory, 'John')}/>\r\n        <LineMarkSeries color={'#2EC4B6'} data={generatePointHistory(props.incomeHistory, 'You')}/>\r\n      </XYPlot>\r\n    </div>\r\n  )\r\n\r\n  function generatePointHistory(incomeHistory, player) {\r\n    if (incomeHistory.length == 0) {\r\n      return;\r\n    }\r\n    let points = [{x: 0, y: 0}];\r\n    for (let i = 0; i < incomeHistory.length; i++) {\r\n      let turnInc = sumIncome(incomeHistory[i], player);\r\n      let sumSoFar = points[i].y + turnInc;\r\n      points.push({x: i + 1, y: sumSoFar})\r\n    }\r\n    return points;\r\n  }\r\n\r\n  function sumIncome(incomeList, player) {\r\n    let income = 0;\r\n    for (let sector of incomeList) {\r\n      if (sector.player === player) {\r\n        income += sector.income;\r\n      }\r\n    }\r\n    return income;\r\n  }\r\n}\r\n\r\nfunction Beach(props) {\r\n  let counter = 0;\r\n  return (\r\n    <div className='beach-container'>\r\n      <img alt=\"A beach line.\" className='beach-image' src={beachImage}/>\r\n      {props.sectors.map((customers) =>\r\n        <Sector buttonDisabled={props.buttonDisabled} placedShops={props.placedShops} handleClick={props.handleClick} customers={customers} number={counter += 1}/>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Sector(props) {\r\n  return (\r\n    <button data-num={props.number} disabled={props.buttonDisabled} className={isMyShop(props.number)} onClick={props.handleClick}>\r\n      <p>{props.number}</p>\r\n      {isThereShop(props.number)}\r\n      <p>{props.customers}</p>\r\n    </button>\r\n  )\r\n\r\n  function isThereShop(sector) {\r\n    let counter = 0;\r\n    for (let owner in props.placedShops) {\r\n      if (props.placedShops[owner] == sector) {\r\n        counter++;\r\n      }\r\n    }\r\n    if (counter === 1) {\r\n      return <img alt=\"An icon of a shop.\" src={shopImagewWite} />\r\n    } else if (counter > 1) {\r\n      return <p>Contested</p>\r\n    }\r\n  }\r\n\r\n  function isMyShop(sector) {\r\n    if (isThereShop(sector)) {\r\n      for (let owner in props.placedShops) {\r\n        if (owner === 'You' && props.placedShops[owner] == sector) {\r\n          return 'players sector';\r\n        }\r\n      }\r\n      return 'computers sector';\r\n    }\r\n    return 'sector'\r\n  }\r\n}\r\n\r\nfunction Message(props) {\r\n  let incomeList = countIncome(props.placedShops, props.beach);\r\n  let players = [\r\n    {name:'John', money: sumIncome(incomeList, 'John')},\r\n    {name:'Mark', money: sumIncome(incomeList, 'Mark')},\r\n    {name:'You', money: sumIncome(incomeList, 'You')},\r\n  ];\r\n  players.sort((a, b) => b.money - a.money);\r\n  if (props.shoudlRender) {\r\n    return (\r\n      <ol className='income-message'>\r\n        <li className={isMyName(players[0].name)} key={players[0].name}>{players[0].name} +{players[0].money}$</li>\r\n        <li className={isMyName(players[1].name)} key={players[1].name}>{players[1].name} +{players[1].money}$</li>\r\n        <li className={isMyName(players[2].name)} key={players[2].name}>{players[2].name} +{players[2].money}$</li>\r\n      </ol>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n  function sumIncome(incomeList, player) {\r\n    let income = 0;\r\n    for (let sector of incomeList) {\r\n      if (sector.player === player) {\r\n        income += sector.income;\r\n      }\r\n    }\r\n    return income;\r\n  }\r\n\r\n  function isMyName(name) {\r\n    if (name === 'You') {\r\n      return 'my turn-result';\r\n    } else {\r\n      return 'others turn-result';\r\n    }\r\n  }\r\n\r\n  function countIncome(shopsConfig, beach) {\r\n    let incomeList = [];\r\n    for (let i = 0; i < beach.length; i++) {\r\n      let distances = [];\r\n      for (let player in shopsConfig) {\r\n        const distanceToShop = Math.abs((i + 1) - shopsConfig[player]);\r\n        distances.push({\r\n          player: player,\r\n          distanceToShop: distanceToShop\r\n        });\r\n      }\r\n      let closest = [{\r\n        distanceToShop: undefined,\r\n        player: undefined\r\n      }];\r\n      for (let distance of distances) {\r\n        if (distance.distanceToShop < closest[0].distanceToShop || closest[0].distanceToShop === undefined) {\r\n          closest = [distance];\r\n        } else if (distance.distanceToShop === closest[0].distanceToShop) {\r\n          closest.push(distance)\r\n        }\r\n      }\r\n      const income = Math.floor(beach[i] / closest.length)\r\n      for (let winner of closest) {\r\n        incomeList.push({\r\n          player: winner.player,\r\n          income: income\r\n        })\r\n      }\r\n    }\r\n    return incomeList;\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}